load("//fs_image/bzl:constants.bzl", "DO_NOT_USE_BUILD_APPLIANCE")                                      
load("//fs_image/bzl:image.bzl", "image")
load("//fs_image/bzl:rpm_repo_snapshot.bzl", "default_rpm_repo_snapshot_for", "install_rpm_repo_snapshot", "set_up_rpm_repo_snapshots")

install_snapshots = [
    set_up_rpm_repo_snapshots(),
    install_rpm_repo_snapshot("//snapshot:fedora31"),
    install_rpm_repo_snapshot("//snapshot:centos8"),
]

image.layer(
    name = "build_appliance",
    features = [
        # Note: need this because the yum_dnf_from_snapshot code can't deal
        # with this directory not existing.
        image.mkdir("/etc", "yum"),
        image.rpms_install([
            "btrfs-progs",
            "coreutils",
            "dnf",  # For installing rpms
            "iproute",
            "net-tools",
            "python3",
            "redhat-rpm-config",  # For building rpms
            "rpm",  # For manipulating rpms
            # "rpm-build", # For building rpms
            # "rpm-sign",  # For signing rpms
            "sudo",
        ]),
    ] + install_snapshots,
    build_opts = image.opts(
        build_appliance = ":host_build_appliance",
        rpm_repo_snapshot = "//snapshot:fedora31",
    ),
    enable_boot_target = True,
)

image.package(
    name = "build_appliance.sendstream.zst",
    layer = ":build_appliance",
)

# Host Build appliance is needed to bootstrap a build appliance because installing rpms
# requires the use of a build appliance.
image.layer(
    name = "host_build_appliance",
    features = [
        image.mkdir("/", "var"),
        image.mkdir("/var", "tmp"),
        image.mkdir("/var", "log"),
        image.mkdir("/var", "cache"),
        image.mkdir("/var/cache", "dnf"),
        image.mkdir("/var", "lib"),
        image.mkdir("/var/lib", "dnf"),
        image.mkdir("/var/lib", "rpm"),
    ] + [
        image.host_dir_mount(source)
        for source in [
            "/bin",
            "/etc",
            "/lib",
            "/sbin",
            "/usr",
        ]
    ] + install_snapshots,
    build_opts = image.opts(
        build_appliance = DO_NOT_USE_BUILD_APPLIANCE,
    ),
)
